import { initializeApp } from "firebase/app";
import { getFirestore, collection, addDoc, getDocs } from "firebase/firestore";

// Firebase config
const firebaseConfig = {
  apiKey: "AIzaSyAfTM6-JS-VHrFnhNw9r3ZVzHkEbyVik2Q",
  authDomain: "promptport-98b22.firebaseapp.com",
  projectId: "promptport-98b22",
  storageBucket: "promptport-98b22.appspot.com",
  messagingSenderId: "486136089201",
  appId: "1:486136089201:web:b542a843a0a18c3eb829d0",
  measurementId: "G-NLGP2Q9H3T"
};

// Init Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

const promptInput = document.getElementById("prompt");
const tagsInput = document.getElementById("tags");
const saveBtn = document.getElementById("save");
const searchInput = document.getElementById("search");
const resultsDiv = document.getElementById("results");
const exportBtn = document.getElementById("export");
const importInput = document.getElementById("import");
const tagFilter = document.getElementById("tag-filter");

let prompts = [];

// Save Prompt to Firebase
saveBtn.addEventListener("click", async () => {
  const text = promptInput.value.trim();
  const tags = tagsInput.value.split(",").map(t => t.trim()).filter(Boolean);

  if (!text) return;

  const newPrompt = { text, tags, date: new Date().toISOString() };
  prompts.push(newPrompt);
  renderPrompts();

  // Save to Firebase
  try {
    await addDoc(collection(db, "prompts"), newPrompt);
    console.log("✅ Prompt saved to Firebase");
  } catch (e) {
    console.error("❌ Error saving prompt:", e);
  }

  promptInput.value = "";
  tagsInput.value = "";
  updateTagFilter();
});

// Load Prompts from Firebase
async function loadPromptsFromFirebase() {
  try {
    const snapshot = await getDocs(collection(db, "prompts"));
    prompts = [];
    snapshot.forEach(doc => {
      prompts.push(doc.data());
    });
    renderPrompts();
    updateTagFilter();
  } catch (e) {
    console.error("❌ Error loading from Firebase:", e);
  }
}

// Render
function renderPrompts() {
  const query = searchInput.value.toLowerCase();
  const selectedTag = tagFilter.value;

  resultsDiv.innerHTML = "";

  prompts
    .filter(p => {
      const textMatch = p.text.toLowerCase().includes(query);
      const tagMatch = !selectedTag || p.tags.includes(selectedTag);
      return textMatch && tagMatch;
    })
    .forEach(p => {
      const div = document.createElement("div");
      div.className = "prompt";
      div.innerHTML = `
        <pre>${p.text}</pre>
        <small>Tags: ${p.tags.join(", ")}</small>
      `;
      resultsDiv.appendChild(div);
    });
}

// Search + Filter
searchInput.addEventListener("input", renderPrompts);
tagFilter.addEventListener("change", renderPrompts);

function updateTagFilter() {
  const allTags = new Set(prompts.flatMap(p => p.tags));
  tagFilter.innerHTML = '<option value="">All Tags</option>';
  allTags.forEach(tag => {
    const option = document.createElement("option");
    option.value = tag;
    option.textContent = tag;
    tagFilter.appendChild(option);
  });
}

// Export
exportBtn.addEventListener("click", () => {
  const data = JSON.stringify(prompts, null, 2);
  const blob = new Blob([data], { type: "application/json" });
  const url = URL.createObjectURL(blob);

  const a = document.createElement("a");
  a.href = url;
  a.download = "prompts.json";
  a.click();
});

// Import
importInput.addEventListener("change", e => {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = e => {
    try {
      const imported = JSON.parse(e.target.result);
      prompts = prompts.concat(imported);
      renderPrompts();
      updateTagFilter();
    } catch (err) {
      alert("Invalid JSON file");
    }
  };
  reader.readAsText(file);
});

// 🔄 Load prompts at start
loadPromptsFromFirebase();
